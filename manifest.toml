name = "qri"
[defaults]
builder = "exec:go"
runner = "local:exec"

[builders."docker:go"]
runtime_image = "debian"
enabled = true
build_base_image      = "golang:1.14.6-buster"

[builders."docker:go".dockerfile_extensions]
pre_mod_download    = "RUN echo 'at pre_mod_download'"
post_mod_download   = "RUN echo 'at post_mod_download'"
pre_source_copy     = "RUN echo 'at pre_source_copy'"
post_source_copy    = "RUN echo 'at post_source_copy'"
pre_build           = "RUN echo 'at pre_build'"
post_build          = "RUN echo 'at post_build'"
pre_runtime_copy    = "RUN echo 'at pre_runtime_copy'"
post_runtime_copy   = "RUN echo 'at post_runtime_copy'"

[builders."exec:go"]
enabled = true
module_path = "github.com/qri-io/test-plans"

[runners."local:docker"]
enabled = true

[runners."local:exec"]
enabled = true

[runners."cluster:swarm"]
enabled = true

[[testcases]]
name = "push"
instances = { min = 2, max = 200, default = 2 }
  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 100 }
  datasetSize     = { type = "int", desc = "size of the dataset to be pushed", unit = "bytes", default = 1000 }
  pushersPerReceiver     = { type = "int", desc = "number of pusher instances we want to have for each receiver instance. Will error if this number is more then the number of instances in the test case", default = 1 }

[[testcases]]
name = "pull"
instances = { min = 2, max = 200, default = 2 }
  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 100 }
  datasetSize     = { type = "int", desc = "size of the dataset to be pushed", unit = "bytes", default = 1000 }
  pullersPerRemote     = { type = "int", desc = "number of pusher instances we want to have for each receiver instance. Will error if this number is more then the number of instances in the test case", default = 1 }

[[testcases]]
name = "profileExchange"
instances = { min = 2, max = 200, default = 2 }
  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 100 }
  profile_timeout_sec = { type = "int", desc = "timeout for profile exchange", unit = "seconds", default = 60 }